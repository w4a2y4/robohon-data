xy = iris
m = svm( x=RAND, y=xy[train,5] )
mean( predict(m,xy[-train,-5]) == xy[-train,5] )
tune.svm( xy[,-5], xy[,5], g=10^(-3:-1), cos=10^(-1:1) )
# Q2
print("Q2")
lapply(c('e1071','sampling'),library,c=T)
s2=strata(iris,'Species',size=rep(40,3))
train=s2[[2]]
len = length(train)
randarr = matrix( runif(4*len, 0, 1), ncol=4, nrow=len )
xy=iris
m = svm( x=randarr, y=xy[train,5] )
summary(m)
mean(predict(m,xy[-train,-5])==xy[-train,5])
tune.svm(xy[,-5],xy[,5],g=10^(-3:-1),cos=10^(-1:1))
print("Q3")
s3 = strata( iris, 'Species', size=c(50,50,20) )
train = s3[[2]]
m = svm( x=xy[train,1:4], y=xy[train,5] )
mean( predict(m,xy[-train,-5]) == xy[-train,5] )
tune.svm( xy[,-5], xy[,5], g=10^(-3:-1), cos=10^(-1:1) )
# Q3
print("Q3")
s3 = strata( iris, 'Species', size=c(50,50,20) )
train = s3[[2]]
xy=iris
m = svm( x=xy[train,1:4], y=xy[train,5] )
mean( predict(m,xy[-train,-5]) == xy[-train,5] )
tune.svm( xy[,-5], xy[,5], g=10^(-3:-1), cos=10^(-1:1) )
# Q3
print("Q3")
s3 = strata( iris, 'Species', size=c(50,50,20) )
train = s3[[2]]
xy=iris
m = svm( x=xy[train,1:4], y=xy[train,5] )
mean( predict(m,xy[-train,-5]) == xy[-train,5] )
tune.svm( xy[,-5], xy[,5], g=10^(-3:-1), cos=10^(-1:1) )
lapply(c('e1071','sampling'),library,c=T)
s=strata(iris,'Species',size=rep(40,3))
train=s[[2]]; xy=iris
m=svm(x=xy[train,1:4],y=xy[train,5]); summary(m)
mean(predict(m,xy[-train,-5])==xy[-train,5])
tune.svm(xy[,-5],xy[,5],g=10^(-3:-1),cos=10^(-1:1))
print("Q1")
library('FNN')
class = iris[,5]
m1 = knn(tr=iris[,-5],te=iris[,-5],cl=class,k=3)
print(acc<-mean(m1==class))
table(m1,iris$Species) # confusion matrix!
print(m2<-knn.reg(iris[,1:3],iris[,1:3],iris[,4],k=3))
print("Q1")
library('FNN')
class = sample(iris[,-5],length(iris[,-5]))
m1 = knn(tr=iris[,-5],te=iris[,-5],cl=class,k=3)
print(acc<-mean(m1==class))
table(m1,iris$Species) # confusion matrix!
print(m2<-knn.reg(iris[,1:3],iris[,1:3],iris[,4],k=3))
print("Q1")
library('FNN')
class = iris[,sample(ncol(iris))]
m1 = knn(tr=iris[,-5],te=iris[,-5],cl=class,k=3)
print(acc<-mean(m1==class))
table(m1,iris$Species) # confusion matrix!
print(m2<-knn.reg(iris[,1:3],iris[,1:3],iris[,4],k=3))
print("Q1")
library('FNN')
class = iris[sample(nrow(iris)),-5]
m1 = knn(tr=iris[,-5],te=iris[,-5],cl=class,k=3)
print(acc<-mean(m1==class))
table(m1,iris$Species) # confusion matrix!
print(m2<-knn.reg(iris[,1:3],iris[,1:3],iris[,4],k=3))
1*30
mean()
mean(1, 2, 3)
mean(x, 1, 2, 3)
mean.help()
help(mean)
x = [1, 2, 3, 4, 5]
x = (1, 2, 3, 4, 5)
help(std)
help(sd)
1*30
\
for (i in 1:3) {}
for (i in 1:3) {
print("Hello, world!")
}
help(mod)
help(log)
log(10000000000)
log(1000000000)
log(1000000000, base =10)
exp()
exp(1)
pi
getwd()
changewd()
setwd()
car
install.packages(car)
install.packages("psych")
install.packages("car")
a = [1, 2, 3]
a = c(1, 2, 3)
a
a[0]
a[1]
a[2]
# 匯入資料
score = c(1, 15, 11, 11, 14, 13, 16, 12, 15, 12, 12, 9, 7, 9, 8)
# 1. 請計算魯蛇分數的
# (a)集中趨勢指標(眾數、中數&平均數)
# (b)離散趨勢指標(全距、變異數&標準差)
score
which.max(score)
table(score)
which.max(table(score))
table(score)
score
table(score)
which.max(score)
score[which.max(score)]
which.max(table(score))
which.max(table(score)).unname
type(which.max(table(score)))
class(which.max(table(score)))
which.max(table(score)).unname
tmp = which.max(table(score))
unname(tmp)
name(tmp)
tmp['names']
tmp['name']
names(tmp)
names(tmp)
sort(score)
sort(score)[8]
sort(score)[7]
# 匯入資料
score = c(1, 15, 11, 11, 14, 13, 16, 12, 15, 12, 12, 9, 7, 9, 8)
# ========================================================#
# 1. 請計算魯蛇分數的                                     #
# (a)集中趨勢指標(眾數、中數&平均數)                      #
# (b)離散趨勢指標(全距、變異數&標準差)                    #
# ========================================================#
names(which.max(table(score)))  #眾數為12
sorted = sort(score)
sorted[8] #中數為12
sorted
ave(score)
??ave
help(ave)
mean(score)
sorted[15] - sorted[1]
sorted[15]
sorted[1]
sorted
var(score)
help("var)
""
)
q()
"
help(var)
3.83592^2
var(score)
var(score)^0.5
# 匯入資料
score = c(1, 15, 11, 11, 14, 13, 16, 12, 15, 12, 12, 9, 7, 9, 8)
# ========================================================#
# 1. 請計算魯蛇分數的                                     #
# (a)集中趨勢指標(眾數、中數&平均數)                      #
# (b)離散趨勢指標(全距、變異數&標準差)                    #
# ========================================================#
names(which.max(table(score)))    #眾數為12
sorted = sort(score)
sorted[8]                         #中數為12
ave = mean(score)                 #平均為11
sorted[15] - sorted[1]            #全距為15
var(score)                        #變異數為14.71429
std = var(score)^0.5              #標準差為3.83592
score(3)
score[3]
score
score[6]
which(sorted == 11)
which(sorted == 11)
which(sorted == scored[3])
which(sorted == score[3])
which,min(sorted == score[3])
which.minmin(sorted == score[3])
which.min(sorted == score[3])
min(which(sorted == score[3]))
min(which(sorted == score[3])) / 15
min(which(sorted == score[6])) / 15
sorted
min(which(sorted == score[2])) / 15
min(which(sorted == score[7])) / 15
(score[6]-ave)/std
std
(score[3]-ave)/std
score[3]
quantile(score, 0.87)
quantile(sorted, 0.87)
unname(quantile(score, 0.87))
0.5*std+ave
score*5
score*5
# 匯入資料
score = c(1, 15, 11, 11, 14, 13, 16, 12, 15, 12, 12, 9, 7, 9, 8)
# ===============================================================#
# 1. 請計算魯蛇分數的                                            #
# (a)集中趨勢指標(眾數、中數&平均數)                             #
# (b)離散趨勢指標(全距、變異數&標準差)                           #
# ===============================================================#
names(which.max(table(score)))    #眾數為12
sorted = sort(score)
sorted[8]                         #中數為12
ave = mean(score)                 #平均為11
sorted[15] - sorted[1]            #全距為15
var(score)                        #變異數為14.71429
std = var(score)^0.5              #標準差為3.83592
# ===============================================================#
# 2. 請問第6位以及第3位受試者魯蛇分數的百分等級以及標準分數。    #
# ===============================================================#
min(which(sorted == score[6])) / 15     #第6位的PR值為73%
min(which(sorted == score[3])) / 15     #第3位的PR值為40%
(score[6]-ave)/std                      #第6位的Z分數為0.5213872
(score[3]-ave)/std                      #第3位的Z分數為0
# ===============================================================#
# 3. 比大小：                                                    #
# A的PR值是87，B的Z分數是0.5，C的原始分數是 14                   #
# ===============================================================#
unname(quantile(score, 0.87))           #A的原始分數約為15
0.5*std+ave                             #B的原始分數約為13, 所以A>C>B
# ===============================================================#
# 3. 比大小：                                                    #
# A的PR值是87，B的Z分數是0.5，C的原始分數是 14                   #
# ===============================================================#
mean(score*5)                 #平均為11
var(score*5)                  #變異數為14.71429
var(score*5)^0.5              #標準差為3.83592
drink = matrix( c(15, 35, 25, 37, 21, 23), 3, 2, byrow = T,
dimnames = list(c("ginger", "melon", "tomato"), c("summer","winter")))
View(drink)
drink = matrix( c(15, 35, 25, 37, 21, 23), 2, 3, byrow = T,
dimnames = list(c("summer","winter"), c("ginger", "melon", "tomato")))
drink = matrix( c(15, 35, 25, 37, 21, 23), 2, 3, byrow = T,
dimnames = list(c("summer","winter"), c("ginger", "melon", "tomato")))
chi = chisq.test(drink,correct=F)
chi
chi$expected
chi.result$residuals
chi$residuals
chi$stdres
??chisq.test
chisq
drink = matrix( c(15, 35, 25, 37, 21, 23), 2, 3, byrow = T,
dimnames = list(c("summer","winter"), c("ginger", "melon", "tomato")))
chi = chisq.test(drink,correct=F)
gender = matrix( c(15, 9), 1, 2, byrow = T)
View(gender)
gender = matrix( c(15, 9), 1, 2, byrow = T, dimnames = list(c("num"), c("M", "F")))
drink = matrix( c(15, 35, 25, 37, 21, 23), 2, 3, byrow = T,
dimnames = list(c("summer","winter"), c("ginger", "melon", "tomato")))
chi = chisq.test(drink,correct=F)
gender = matrix( c(15, 9), 1, 2, byrow = T, dimnames = list(c("num"), c("M", "F")))
View(gender)
drink = matrix( c(15, 35, 25, 37, 21, 23), 2, 3, byrow = T,
dimnames = list(c("summer","winter"), c("ginger", "melon", "tomato")))
chi = chisq.test(drink,correct=F)
gender = matrix( c(15, 9), 1, 2, byrow = T, dimnames = list(c("num"), c("M", "F")))
chi = chisq.test(drink,correct=F)
chisq.
chi
chi = chisq.test(drink,correct=F)
chi
drink = matrix( c(15, 35, 25, 37, 21, 23), 2, 3, byrow = T,
dimnames = list(c("summer","winter"), c("ginger", "melon", "tomato")))
chi = chisq.test(drink,correct=F)
gender = matrix( c(15, 9), 1, 2, byrow = T, dimnames = list(c("num"), c("M", "F")))
chi = chisq.test(gender,correct=F)
chi
chi$expected
chi
install.packages("vcd")
vcd
vcd::
assocstats()
vcd:assocstats()
vcd::assocstats()
x = matrix(c(550,681,61,144),nrow=2,ncol=2,byrow=F)
View(x)
assocstats(x)
x = matrix(c(550,681,61,144),nrow=2,ncol=2,byrow=F)
vcd::assocstats(x)
cvd.data <- matrix(c(2,23,5,30), 2, 2, byrow = T, dimnames = list(c("Non CVD", "CVD"), c("H salt","L salt")))
fisher.test(cvd.data,	alternative	=	“two.sided”)
x = matrix(c(550,681,61,144),nrow=2,ncol=2,byrow=F)
vcd::assocstats(x)
cvd.data <- matrix(c(2,23,5,30), 2, 2, byrow = T, dimnames = list(c("Non CVD", "CVD"), c("H salt","L salt")))
fisher.test(cvd.data,	alternative	=	"two.sided")
vcd = vcd::assocstats(x)
x = matrix(c(550,681,61,144),nrow=2,ncol=2,byrow=F)
library(vcd)
v = assocstats(x)
cvd.data <- matrix(c(2,23,5,30), 2, 2, byrow = T, dimnames = list(c("Non CVD", "CVD"), c("H salt","L salt")))
fisher.test(cvd.data,	alternative	=	"two.sided")
v
judge = matrix(c(15,2,3,1,3,2,0,1,3), 3,3,byrow = T,
dimnames = list(c("No", "internal", "external"),
c("No", "internal", "external")))
Kappa(judge)
View(x)
View(judge)
sentence = matrix(c(251, 508, 33, 33), nrow=2, ncol=2, byrow=F)
View(sentence)
sentence = matrix(c(251, 508, 33, 33), nrow=2, ncol=2, byrow=F)
fisher.test(sentence)
??fisher.test
sentence = matrix(c(251, 508, 33, 33), nrow=2, ncol=2, byrow=F)
fisher.test(sentence, alternative = "two.sided")
chisq.test(sentence)
assocstats(sentence)
chisq.test(sentence, correct = F)
vcd.SexualFun
SexualFun
Kappa(SexualFun)
??Kappa
library(dplyr);library(tidyr)
data(iris);head(iris)
# select variables
iris.extract <- select(iris, Species, Petal.Length, Sepal.Length)
head(iris.extract)
# filter data
filter(iris, Sepal.Length > 5 & Sepal.Width < 3)
slice(iris, 1:10)
# mutate variable
iris.new <- mutate(iris, Sepal.area = 	Sepal.Length*Sepal.Width,
Sepal.area2 = Sepal.area/10)
# group by data
summarise.iris <- iris %>%
group_by(., Species) %>% # 使用Species變項進行分組
summarise(., m.Sepal.L = mean(Sepal.Length),
m.Sepal.W = mean(Sepal.Width),
sd.Sepal.L = sd(Sepal.Length),
sd.Sepal.W = sd(Sepal.Width),
N = n()) # 在dplyr中n()指樣本數
summarise.iris
# data transformation
library(tidyr)
# adding identification variable
mini.iris <- iris %>% mutate(., id = 1:nrow(.))
head(mini.iris)
# wide format -> long format
iris.gather <- gather(mini.iris, key = flower.attr, value = measurement, -Species, -id)
iris.gather
# long format -> wide format
iris.spread <- spread(iris.gather, flower.attr, measurement)
iris.spread
# practice
data("Orange")
Orange.m <- mutate(Orange, diameter = circumference/pi)
Orange1000 <- filter(Orange, age > 1000)
Orange1000 <- mutate(Orange1000, id = 1:nrow(Orange1000))
Orange.wide <- spread(Orange1000, key = Tree, value = circumference)
# in this example, age serves as the same character of id in the last example.
library(dplyr);library(tidyr)
install.packages("dplyr")
install.packages("tidy")
install.packages("tidyr")
View(iris)
Petal.Length, Sepal.Length)
head(iris.extract)
iris.extract <- select(iris, Species, Petal.Length, Sepal.Length)
library(dplyr);library(tidyr)
iris.extract <- select(iris, Species, Petal.Length, Sepal.Length)
View(iris.extract)
filter(iris, Sepal.Length > 5 & Sepal.Width < 3)
slice(iris, 1:10)
iris.new <- mutate(iris, Sepal.area = 	Sepal.Length*Sepal.Width,
Sepal.area2 = Sepal.area/10)
View(iris.new)
# group by data
summarise.iris <- iris %>%
group_by(., Species) %>% # 使用Species變項進行分組
summarise(., m.Sepal.L = mean(Sepal.Length),
m.Sepal.W = mean(Sepal.Width),
sd.Sepal.L = sd(Sepal.Length),
sd.Sepal.W = sd(Sepal.Width),
N = n()) # 在dplyr中n()指樣本數
summarise.iris
group_by(iris, Species)
group_by(iris, Petal.Length)
group_by(iris, Species)[1]
summarise.iris <- iris %>%
group_by(., Species) %>% # 使用Species變項進行分組
summarise(., m.Sepal.L = mean(Sepal.Length),
m.Sepal.W = mean(Sepal.Width),
sd.Sepal.L = sd(Sepal.Length),
sd.Sepal.W = sd(Sepal.Width),
N = n()) # 在dplyr中n()指樣本數
summarise.iris
summarise.iris <- iris %>%
group_by(., Sepal.Length) %>% # 使用Species變項進行分組
summarise(., m.Sepal.L = mean(Sepal.Length),
m.Sepal.W = mean(Sepal.Width),
sd.Sepal.L = sd(Sepal.Length),
sd.Sepal.W = sd(Sepal.Width),
N = n()) # 在dplyr中n()指樣本數
summarise.iris
summarise.iris <- iris %>%
group_by(., Species) %>% # 使用Species變項進行分組
summarise(., m.Sepal.L = mean(Sepal.Length),
m.Sepal.W = mean(Sepal.Width),
sd.Sepal.L = sd(Sepal.Length),
sd.Sepal.W = sd(Sepal.Width),
N = n()) # 在dplyr中n()指樣本數
summarise.iris
mini.iris <- iris %>% mutate(., id = 1:nrow(.))
head(mini.iris)
View(mini.iris)
iris.gather <- gather(mini.iris, key = flower.attr, value = measurement, -Species, -id)
iris.gather
View(iris.gather)
iris.spread <- spread(iris.gather, flower.attr, measurement)
iris.spread
View(iris.spread)
data("Orange")
Orange.m <- mutate(Orange, diameter = circumference/pi)
View(Orange)
View(Orange.m)
Orange1000 <- filter(Orange, age > 1000)
View(Orange1000)
Orange.wide <- spread(Orange1000, key = Tree, value = circumference)
View(Orange.wide)
Orange.wide <- spread(Orange1000, key = circumference, value = age)
Orange.wide <- spread(Orange1000, key = Tree, value = circumference)
Orange1000 <- mutate(Orange1000, id = 1:nrow(Orange1000))
Orange1000 <- mutate(Orange1000, id = Tree)
Orange.wide <- spread(Orange1000, circumference, value)
Orange1000 <- select(id, circumference)
Orange.wide <- spread(Orange1000, circumference, value)
Orange1000 <- select(Orange1000, id, circumference)
Orange.wide <- spread(Orange1000, circumference, value)
Orange.wide <- spread(Orange1000, circumference)
Orange1000 <- select(Orange1000, id, age, circumference)
Orange.wide <- spread(Orange1000, age, circumference)
Orange1000 <- select(Orange1000, id, age, circumference)
Orange1000 <- select(Orange1000, id, age, circumference)
Orange1000 <- mutate(Orange1000, id = Tree)
Orange1000 <- filter(Orange, age > 1000)
Orange1000 <- mutate(Orange1000, id = Tree)
Orange.wide <- spread(Orange1000, age, circumference)
Orange.wide <- spread(Orange1000, age, circumference)
Orange1000 <- select(Orange1000, id, age, circumference)
Orange.wide <- spread(Orange1000, age, circumference)
getwd()
setwd("/Users/w4a2y4/Desktop/robohon-data")
blks <- read.csv("result/blocks.csv")
View(blks)
aov(RT ~ eoc, blks)
rt.aov <- aov(RT ~ eoc, blks)
summary(rt.aov)
pb2.aov <- aov(probe2 ~ eoc, blks)
summary(pb2.aov)
om.aov <- aov(omission ~ eoc, blks)
summary(om.aov)
rtcv.aov <- aov(RTCV ~ eoc, blks)
summary(rtcv.aov)
anti.aov <- aov(anticipation ~ eoc, blks)
summary(anti.aov)
subset(blks, probe2 != -1)
pb2.aov <- aov(probe2 ~ eoc, subset(blks, probe2 != -1))
summary(pb2.aov)
TukeyHSD(rt.aov)
rt.aov <- aov(RT ~ eoc, blks)
rt.aov <- aov(RT ~ eoc, blks)
TukeyHSD(rt.aov)
summary(rt.aov)
rt.aov
setwd("/Users/w4a2y4/Desktop/robohon-data")
blks <- read.csv("result/blocks.csv")
rt.aov <- aov(RT ~ eoc, blks)
om.aov <- aov(omission ~ eoc, blks)
rtcv.aov <- aov(RTCV ~ eoc, blks)
anti.aov <- aov(anticipation ~ eoc, blks)
pb2.aov <- aov(probe2 ~ eoc, subset(blks, probe2 != -1))
TukeyHSD(rt.aov)
library(multcomp)
summary(glht(rt.aov, linfct = mcp(group = "Tukey")))
glht(rt.aov)
summary(glht(rt.aov))
summary(glht(rt.aov, linfct = mcp(eoc = "Tukey")))
pairwise.t.test(blks$RT, blks$eoc)
pairwise.t.test(blks$RTCV, blks$eoc)
summary(pairwise.t.test(blks$RTCV, blks$eoc))
summary(rt.aov)
pairwise.t.test(blks$RT, blks$eoc)
summary(om.aov)
summary(rtcv.aov)
summary(anti.aov)
summary(pb2.aov)
summary(rt.aov) # ***
pairwise.t.test(blks$RT, blks$eoc)
summary(om.aov) # -
summary(rtcv.aov) # ***
pairwise.t.test(blks$RTCV, blks$eoc)
summary(anti.aov) # ***
pairwise.t.test(blks$anticipation, blks$eoc)
summary(pb2.aov) #**
pairwise.t.test(blks$probe2, blks$eoc)
